# -*- coding: utf-8 -*-
"""Python_basic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1keurG-b-Jclqt6_dK1Pt-AjrPHKlY_Ir
"""

dir(set)

"""# set method

"""

#(I)SET
variable = {5, 10.5, "apple", True, False, 5, "apple"}
variable

#add function
variable.add(100)

#Clear(Removes all the elements from the set)
variable.clear()

#copy(a copy of the set)
variable.copy()

#difference(set that contains the items that only exist in set A, and not in set Y)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","STAT","COMPUTER","DATA"}
P = A.difference(B)
print(P)

#DISCARD(clear the specified item)
name={"ML","AI","BIG DATA","STAT"}
name.discard("BIG DATA")
print(name)

#intersection( that only contains the items that are present in both sets)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","STAT","COMPUTER","DATA"}
output= A.intersection(B)
print(output)

#difference_update  (Remove the items that exist in both sets)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","STAT","COMPUTER","DATA"}
A.difference_update(B)
print(A)

#intersection_update(Removes the items in this set that are not present in other specified set)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","STAT","COMPUTER","DATA"}
C={"DATA","MATH","SPORTS","ANALYSIS"}
A.intersection_update(B, C)
print(A)

#isdisjoint(it is shown whether two sets have a intersection or not)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","STAT","COMPUTER","DATA"}
L = A.isdisjoint(B) 

print(L)

#issubset(if the all itemS present in both A AND B)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","AI","ML","DATA"}
K = A.issubset(B)
print(K)

#issuperset( if all items set B are present in set A)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","AI","ML","DATA"}
K = A.issuperset(B)
print(K)

#pop(Remove a random item from the set)
A = {"AI","BIG DATA","DATA",'ML'}
A.pop()

print(A)

#remove(Removes the specified element)
A = {"AI","BIG DATA","DATA",'ML'}
A.remove("ML")
print(A)

#symmetric_difference(It contain all items in both set,except items that are not present in both sets)
A = {"AI","BIG DATA","DATA",'ML'}
C={"DATA","MATH","SPORTS","ANALYSIS"}
K = A.symmetric_difference(C)
print(K)

#symmetric_difference_update(Remove the items that are present in both sets)
A = {"AI","BIG DATA","DATA",'ML'}
C={"DATA","MATH","SPORTS","ANALYSIS"}
A.symmetric_difference_update(C) 
print(A)

#union(set that contains all items from both sets)
A = {"AI","BIG DATA","DATA",'ML'}
B = {"BIG DATA","AI","ML","DATA"}
G= A.union(B)
print(G)

#update(add multiple items to a set)
#we can use list, tuple, set
A = {"AI","BIG DATA","DATA",'ML'}
A.update(["xxx","YYY"])
A

"""**LIST METHODS**"""

dir(list)

"""**1) append( )**
a
dds item/items at the end of the list
"""

A = ["AI","BIG DATA","DATA",'ML']
A.append("CDA")
print(A)

"""**2) insert( )**

inserts item at a specific index location.
"""

A.insert(4,"stat")
print(A)

"""**3) remove( )**

removes the first items specified element in the list.
"""

A.remove("R")
print(A)

"""**4) POP()**

Removes the element at the specified position
"""

#index is specified
A.pop(2)
print(A)

"""**5) clear( )**

Removes all the elements from the list.
"""

VAR=['AI', 'BIG DATA', 'DATA', 'stat', 'ML', 'CDA',2,3,45,{"xx":"yy"}]
VAR.clear()
print(VAR)

"""**6) copy( )**

copying the list / creating a duplicate list
"""

A = ["AI","BIG DATA","DATA",'ML',(23,45),{"RRR":89}]
X=A.copy()
print(A)

"""**7) extend( )**

Adding a list with another list.
"""

list1=[23,45,67]
list2=[45,67,89,90]
list1.extend(list2)
list1

"""**8) sort( )**

Sorts the list

"""

#in the system automatically takes the elements in the list are sorted in Ascending order
list3=[34,56,78,45,89,34]
list3.sort()
list3

#if you want to use descending order
list3.sort(reverse = True) 
list3

"""**9) index( )**

Returns the index of first specified element
"""

A = ["AI","BIG DATA","DATA",'ML']
A.index("ML")

"""**10) count( )**

Returns the number of times a specified value occurs in a tuple
"""

A = ["AI","BIG DATA","DATA",'ML']
A.count("ML")

"""**11) reverse( )**

reverses the position of the elements in the list
"""

A = ["AI","BIG DATA","DATA",'ML']
A.reverse()

"""**Tuple methods**"""

dir(tuple)

"""**1) Count( )**

Returns the number of times a specified value occurs in a tuple
"""

MY=({"data":12},[1,3,4,5],56,"myname")
MY

MY.count(56)

"""**2) Index( )**

Searches the tuple for a specified value
"""

MY.index("myname")

"""**Dictionary methods**"""

dir(dict)

var2={ "Student_name":"Varun","Student_id":123,"student_address":"xxyz","student_mark":90,"student_performance":"good"}
var2

"""**1) get( )**

returns the value of the specified key
"""

var2.get("student_mark")

"""**2) keys( )**

returns all the keys and only keys
"""

var2.keys()

"""3)**clear()**

Removes all the elements from the dictionar
"""

var2.clear()
print(var2)

"""**4) copy**

copy of the dictionary
"""

var2={ "Student_name":"Varun","Student_id":123,"student_address":"xxyz","student_mark":90,"student_performance":"good"}
var2

var3=var2.copy()
var3

"""**5) fromkeys()**

create a dictionary with the specified keys and value
"""

dis={'location_1','location_2','location_3'}
dis2="heaven"
out = dict.fromkeys(dis, dis2)
print(out)

"""**6) items()**

returns both key and value in seperate tuple.
"""

x = out.items()

print(x)

"""**7) pop()**

remove the value with specified key
"""

var2.pop("Student_name")

"""**8) popitem()**

Remove the last item from the dictionary
"""

var2={ "Student_name":"Varun","Student_id":123,"student_address":"xxyz","student_mark":90,"student_performance":"good"}
var2.popitem()
print(var2)

"""9**) setdefault()**

Returns the value of the specified key
"""

x = var2.setdefault("Student_id", "Student_idxx")

print(x)

"""**10) update()**

Updates the dictionary with the specified key-value pairs
"""

var2.update({"student_health_status": "normal"})
print(var2)

"""**11) values()**

Return the *values*
"""

val1=var2.values()
print(val1)